This document is written to give an overview of the architectural aspects of mGSV and to provide details on the design of this tool.

Step 1: 

- On uploading the synteny and annotation at the home page, these files are verified for its correct format. 
- If the format is incorrect, an error message will be generated to edit particular lines in the file, and correct the format. 
- A session id is generated to keep track of each use of mGSV. To generate a session_id, we use the timestamp, e.g., '3060214201130000000' and PHP process ID, e.g., '22723' to create the session_id, e.g., '306021420113000000022723'.
- If both synteny and annotation files are uploaded, then these files are temporarily stored at mgsv/syn folder.

Step 2: 

- If the user has provided an email address, it will be stored in the MySQL table 'userinfo' along with the uploaded synteny file name, uploaded annotation file name, session_id, a URL to access the synteny view page, and a hash uniquely generated for this user.
- If the annotation file is not uploaded, the column will remain empty.
- The hash is used to retrieve previously uploaded files and to provide a link to the current synteny view page.
- Here is a description of table 'userinfo':
+-------------+-----------+------+-----+-------------------+----------------+
| Field       | Type      | Null | Key | Default           | Extra          |
+-------------+-----------+------+-----+-------------------+----------------+
| id          | int(10)   | NO   | PRI | NULL              | auto_increment |
| email       | text      | NO   |     | NULL              |                |
| hash        | text      | NO   |     | NULL              |                |
| synfilename | text      | NO   |     | NULL              |                |
| annfilename | text      | YES  |     | NULL              |                |
| url         | text      | NO   |     | NULL              |                |
| session_id  | text      | NO   |     | NULL              |                |
| create_on   | timestamp | NO   |     | CURRENT_TIMESTAMP |                |
+-------------+-----------+------+-----+-------------------+----------------+

Step 3:

- Due to the open-ended format of the synteny file, a new synteny table will be dynamically created for each uploaded. 
- The new synteny table is called '306021420113000000022723_synteny', and this name is generated by using session_id as a prefix to the word '_synteny'.
- Each column in the synteny file is a field in the table. The column headers in the file become the column headers.
- An additional field called 'length' is generated to store either (org1_end - org1_start + 1) or (org2_end - org2_start + 1), whichever is smaller.
- Here is a description of '306021420113000000022723_synteny' generated using sample data.
+------------+---------------------+------+-----+---------+----------------+
| Field      | Type                | Null | Key | Default | Extra          |
+------------+---------------------+------+-----+---------+----------------+
| id         | int(10)             | NO   | PRI | NULL    | auto_increment |
| org1       | varchar(255)        | NO   |     | NULL    |                |
| org1_start | int(10) unsigned    | NO   | MUL | NULL    |                |
| org1_end   | bigint(20) unsigned | NO   | MUL | NULL    |                |
| org2       | varchar(255)        | NO   |     | NULL    |                |
| org2_start | int(10) unsigned    | NO   | MUL | NULL    |                |
| org2_end   | bigint(20) unsigned | NO   | MUL | NULL    |                |
| blocks     | tinyint(1)          | NO   |     | 1       |                |
| score      | varchar(100)        | YES  |     | NULL    |                |
| evalue     | varchar(100)        | YES  |     | NULL    |                |
| length     | varchar(100)        | YES  |     | NULL    |                |
+------------+---------------------+------+-----+---------+----------------+

Step 4:

- If an annotation file is uploaded, another table will be generated, '306021420113000000022723_annotation', which follows the same naming method where we prefix the session_id to the word '_annotation'.
- An example is described below.
+---------------+---------------------+------+-----+---------+----------------+
| Field         | Type                | Null | Key | Default | Extra          |
+---------------+---------------------+------+-----+---------+----------------+
| id            | int(10)             | NO   | PRI | NULL    | auto_increment |
| org_id        | varchar(50)         | NO   |     | NULL    |                |
| start         | int(20) unsigned    | NO   | MUL | NULL    |                |
| end           | bigint(20) unsigned | NO   | MUL | NULL    |                |
| strand        | varchar(1)          | YES  |     | NULL    |                |
| feature_name  | text                | YES  |     | NULL    |                |
| feature_value | double              | YES  |     | NULL    |                |
| track_name    | varchar(100)        | NO   |     | NULL    |                |
| track_shape   | varchar(100)        | NO   |     | NULL    |                |
| track_color   | varchar(100)        | YES  |     | NULL    |                |
+---------------+---------------------+------+-----+---------+----------------+

Step 6:

- Cleanup scripts are provided to drop database tables and to delete synteny_annotation_<session_id> folders that are older than 60 days.
- A single cronjob can be set to drop tables, to delete entries in the table 'userinfo', and to delete the directory.
